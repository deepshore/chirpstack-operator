- name: Define items for handling ENVs from Secrets (Chirpstack)
  set_fact:
    envs_from_secrets_chirpstack:
      - var: chirpstack_postgresql_db_operations_postgres_password
        key: "{{ server.configuration.chirpstack.postgresql.db_operations.postgres_password.key }}"
        secret: "{{ server.configuration.chirpstack.postgresql.db_operations.postgres_password.secret }}"
        env: "CHIRPSTACK_POSTGRESQL_DB_OPERATIONS_POSTGRES_PASSWORD"    
      - var: chirpstack_postgresql_dsn_username
        key: "{{ server.configuration.chirpstack.postgresql.dsn.username.key }}"
        secret: "{{ server.configuration.chirpstack.postgresql.dsn.username.secret }}"
        env: "CHIRPSTACK_POSTGRESQL_DSN_USERNAME"
      - var: chirpstack_postgresql_dsn_password
        key: "{{ server.configuration.chirpstack.postgresql.dsn.password.key }}"
        secret: "{{ server.configuration.chirpstack.postgresql.dsn.password.secret }}"
        env: "CHIRPSTACK_POSTGRESQL_DSN_PASSWORD"
      - var: chirpstack_redis_username
        key: "{{ server.configuration.chirpstack.redis.username.key }}"
        secret: "{{ server.configuration.chirpstack.redis.username.secret }}"
        env: "CHIRPSTACK_REDIS_USERNAME"
      - var: chirpstack_redis_password
        key: "{{ server.configuration.chirpstack.redis.password.key }}"
        secret: "{{ server.configuration.chirpstack.redis.password.secret }}"
        env: "CHIRPSTACK_REDIS_PASSWORD"    
      - var: chirpstack_api_secret
        key: "{{ server.configuration.chirpstack.api.secret.key }}"
        secret: "{{ server.configuration.chirpstack.api.secret.secret }}"
        env: "CHIRPSTACK_API_SECRET"
      - var: chirpstack_integration_mqtt_username
        key: "{{ server.configuration.chirpstack.integration.mqtt.username.key }}"
        secret: "{{ server.configuration.chirpstack.integration.mqtt.username.secret }}"
        env: "CHIRPSTACK_INTEGRATION_MQTT_USERNAME"
      - var: chirpstack_integration_mqtt_password
        key: "{{ server.configuration.chirpstack.integration.mqtt.password.key }}"
        secret: "{{ server.configuration.chirpstack.integration.mqtt.password.secret }}"
        env: "CHIRPSTACK_INTEGRATION_MQTT_PASSWORD"  
      - var: chirpstack_user_authentication_openid_connect_client_secret
        key: "{{ server.configuration.chirpstack.user_authentication.openid_connect.client_secret.key }}"
        secret: "{{ server.configuration.chirpstack.user_authentication.openid_connect.client_secret.secret }}"
        env: "CHIRPSTACK_USER_AUTHENTICATION_OPENID_CONNECT_CLIENT_SECRET"
  notify:
    - "restart server pods" 

- name: Extract Secrets (Chirpstack)
  include_tasks: extract_secrets.yml
  loop: "{{ envs_from_secrets_chirpstack }}"

- name: Define items for handling ENVs from Secrets (Regions)
  set_fact:
    envs_from_secrets_regions:
      - var: regions_eu433_gateway_backend_mqtt_username
        key: "{{ server.configuration.regions.eu433.gateway.backend.mqtt.username.key }}"
        secret: "{{ server.configuration.regions.eu433.gateway.backend.mqtt.username.secret }}"
        env: "REGIONS_EU433_GATEWAY_BACKEND_MQTT_USERNAME"
      - var: regions_eu433_gateway_backend_mqtt_password
        key: "{{ server.configuration.regions.eu433.gateway.backend.mqtt.password.key }}"
        secret: "{{ server.configuration.regions.eu433.gateway.backend.mqtt.password.secret }}"
        env: "REGIONS_EU433_GATEWAY_BACKEND_MQTT_PASSWORD"
      - var: regions_eu868_gateway_backend_mqtt_username
        key: "{{ server.configuration.regions.eu868.gateway.backend.mqtt.username.key }}"
        secret: "{{ server.configuration.regions.eu868.gateway.backend.mqtt.username.secret }}"
        env: "REGIONS_EU868_GATEWAY_BACKEND_MQTT_USERNAME"
      - var: regions_eu868_gateway_backend_mqtt_password
        key: "{{ server.configuration.regions.eu868.gateway.backend.mqtt.password.key }}"
        secret: "{{ server.configuration.regions.eu868.gateway.backend.mqtt.password.secret }}"
        env: "REGIONS_EU868_GATEWAY_BACKEND_MQTT_PASSWORD"
  notify:
    - "restart server pods" 

- name: Extract Secrets (Regions)
  include_tasks: extract_secrets.yml
  loop: "{{ envs_from_secrets_regions }}"
