apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ ansible_operator_meta.name }}-configuration-chirpstack"
  namespace: "{{ ansible_operator_meta.namespace }}"
data:
  chirpstack.toml: |
    # Logging configuration
    [logging]
    
        # Log level.
        #
        # Valid options are:
        #   * TRACE
        #   * DEBUG
        #   * INFO
        #   * WARN
        #   * ERROR
        #   * OFF
        level="{{ server.configuration.chirpstack.logging.level }}"
    
        # Log as JSON.
        json={{ server.configuration.chirpstack.logging.json | lower }}
    
    # PostgreSQL configuration.
    [postgresql]
    
        # PostgreSQL DSN.
        #
        # Format example: postgres://<USERNAME>:<PASSWORD>@<HOSTNAME>/<DATABASE>?sslmode=<SSLMODE>.
        #
        # SSL mode options:
        #  * disable - no SSL
        #  * require - Always SSL (skip verification)
        #  * verify-ca - Always SSL (verify that the certificate presented by the server was signed by a trusted CA)
        #  * verify-full - Always SSL (verify that the certification presented by the server was signed by a trusted CA and the server host name matches the one in the certificate)
        dsn="postgresql://$CHIRPSTACK_POSTGRESQL_DSN_USERNAME:$CHIRPSTACK_POSTGRESQL_DSN_PASSWORD@{{ server.configuration.chirpstack.postgresql.dsn.hostname }}/{{ server.configuration.chirpstack.postgresql.dsn.database }}?sslmode={{ server.configuration.chirpstack.postgresql.dsn.ssl_mode }}"
    
        # Max open connections.
        #
        # This sets the max. number of open connections that are allowed in the
        # PostgreSQL connection pool.
        max_open_connections={{ server.configuration.chirpstack.postgresql.max_open_connections }}
    
        # Min idle connections.
        #
        # This sets the min. number of idle connections in the PostgreSQL connection
        # pool (0 = equal to max_open_connections).
        min_idle_connections={{ server.configuration.chirpstack.postgresql.min_idle_connections }}
    
    
    # Redis configuration.
    [redis]
    
        # Server address or addresses.
        #
        # Example formats:
        #   redis://127.0.0.1:6379
        #   redis://:password@127.0.0.1:6379
        #   redis://username:password@127.0.0.1:6379
        #
        # Set multiple addresses when connecting to a cluster.
        servers=[
{% for redis_server in server.configuration.chirpstack.redis.servers %}
{% if server.configuration.chirpstack.redis.username.secret %}
            "redis://$CHIRPSTACK_REDIS_USERNAME:$CHIRPSTACK_REDIS_PASSWORD@{{ redis_server }}",
{% elif server.configuration.chirpstack.redis.password.secret %}
            "redis://:$CHIRPSTACK_REDIS_PASSWORD@{{ redis_server }}",
{% else %}
            "redis://{{ redis_server }}",
{% endif %}
{% endfor %}
        ]
    
        # Redis Cluster.
        #
        # Set this to true when the provided URLs are pointing to a Redis Cluster
        # instance.
        cluster={{ server.configuration.chirpstack.redis.cluster | lower }}
    
        # Key prefix.
        #
        # A key prefix can be used to avoid key collisions when multiple deployments
        # are using the same Redis database and it is not possible to separate
        # keys by database index (e.g. when using Redis Cluster, which does not
        # support multiple databases).
        key_prefix="{{ server.configuration.chirpstack.redis.key_prefix }}"
    
        # Max open connections.
        #
        # This sets the max. number of open connections that are allowed in the
        # Redis connection pool.
        max_open_connections={{ server.configuration.chirpstack.redis.max_open_connections }}
    
        # Min idle connections.
        #
        # This sets the min. number of idle connections in the Redis connection
        # pool (0 = equal to max_open_connections).
        min_idle_connections={{ server.configuration.chirpstack.redis.min_idle_connections }}
    
    
    # API interface configuration.
    [api]
    
        # interface:port to bind the API interface to.
        bind="0.0.0.0:8080"
    
        # Secret.
        #
        # This secret is used for generating login and API tokens, make sure this
        # is never exposed. Changing this secret will invalidate all login and API
        # tokens. The following command can be used to generate a random secret:
        #   openssl rand -base64 32
        secret="$CHIRPSTACK_API_SECRET"
    
    
    # Global gateway configuration.
    # Please note that backend configuration can be found in the per-region
    # configuration.
    [gateway]
    
        # CA certificate and key file (optional).
        #
        # If setting the CA certificate and key file options, ChirpStack 
        # will generate client certificates which can be used by the gateway for
        # authentication and authorization. The Common Name of the certificate will
        # be set to the Gateway ID.
{% if server.configuration.chirpstack.gateway.ca_key.secret %}
        ca_key="/certs/gateway-ca.key"
{% else %}
        ca_key=""
{% endif %}
{% if server.configuration.chirpstack.gateway.ca_cert.secret %}
        ca_cert="/certs/gateway-ca.crt"
{% else %}
        ca_cert=""
{% endif %}
    
        # Certificate lifetime.
        #
        # This defines how long (after generating) the certificate remains valid.
        client_cert_lifetime="{{ server.configuration.chirpstack.gateway.client_cert_lifetime }}"
    
        # Allow unknown gateways.
        #
        # If set to true, then uplinks received from gateways not configured in
        # ChirpStack will be allowed.
        allow_unknown_gateways={{ server.configuration.chirpstack.gateway.allow_unknown_gateways | lower }}
    
    
    # Network related configuration.
    [network]
    
        # Network identifier (NetID, 3 bytes) encoded as HEX (e.g. 010203).
        net_id="{{ server.configuration.chirpstack.network.net_id }}"
    
        # DevAddr prefix(es).
        #
        # This makes it possible to configure one or multiple sub-ranges within
        # the configured NetID. If left blank, then the complete DevAddr space
        # provided by the configured NetID will be used.
        # If multiple prefixes are configured, a random prefix will be chosen when
        # generating a DevAddr.
        #
        # Example configuration:
        # dev_addr_prefixes=["0000ff00/24"]
        #
        # This example configures the DevAddr range to 0000ff00 - 0000ffff.
        # The /24 means that the 24MSB of the prefix will be used, meaning that the
        # 8LSB will be used as address space.
        dev_addr_prefixes=[
{% for prefix in server.configuration.chirpstack.network.dev_addr_prefixes %}
            "{{ prefix }}",
{% endfor %}
        ]
    
        # Enabled regions.
        #
        # Multiple regions can be enabled simultaneously. Each region must match
        # the 'name' parameter of the region configuration in '[[regions]]'.
        enabled_regions=[
{% for region in server.configuration.chirpstack.network.enabled_regions %}
            "{{ region }}",   
{% endfor %}
        ]
    
        # Device session expiration.
        #
        # The TTL value defines the time after which a device-session expires
        # after no activity.
        device_session_ttl="{{ server.configuration.chirpstack.network.device_session_ttl }}"
    
        # Time to wait for uplink de-duplication.
        #
        # This is the time that ChirpStack will wait for other gateways to receive
        # the same uplink frame. Please note that this value affects the
        # roundtrip time. The total roundtrip time (which includes network latency)
        # must be less than the (first) receive-window.
        deduplication_delay="{{ server.configuration.chirpstack.network.deduplication_delay }}"
    
        # Get downlink data delay.
        #
        # This is the time that ChirpStack waits between forwarding data to the
        # integration(s) and reading data from the queue. A higher value means that
        # an end-application has more time to schedule a downlink queue item which
        # can be processed within the same uplink / downlink transaction.
        # Please note that this value has influence on the uplink / downlink
        # roundtrip time. Setting this value too high means ChirpStack will be
        # unable to respond to the device within its receive-window.
        get_downlink_data_delay="{{ server.configuration.chirpstack.network.get_downlink_data_delay }}"
    
        # Mac-commands disabled.
        mac_commands_disabled={{ server.configuration.chirpstack.network.mac_commands_disabled | lower }}
    
        # Custom ADR plugins.
        #
        # The custom ADR plugin must be implemented in JavaScript. For an example
        # skeleton, please see:
        # https://github.com/chirpstack/chirpstack/blob/master/examples/adr_plugins/plugin_skeleton.js
        adr_plugins=[
{% for plugin in server.configuration.chirpstack.network.adr_plugins %}
            "/adr-plugins/{{ plugin.file }}",   
{% endfor %}
        ]
    
        # Scheduler settings.
        [network.scheduler]
    
        # Scheduler interval.
        #
        # The interval in which the downlink scheduler for multicast, Class-B and
        # Class-C runs.
        interval="{{ server.configuration.chirpstack.network.scheduler.interval }}"
    
        # Class-A lock duration.
        #
        # This defines the lock duration between receiving a Class-A uplink and
        # the next scheduler-run for a device. The purpose of this lock is to
        # avoid collisions between Class-A and Class-B/C downlinks.
        class_a_lock_duration="{{ server.configuration.chirpstack.network.scheduler.class_a_lock_duration }}"
    
        # Class-C lock duration.
        #
        # This defines the lock duration between scheduling two Class-C downlink
        # payloads for the same device. The purpose of this lock is to avoid
        # overlap between scheduling Class-C downlinks and / or spreading the 
        # downlink capacity load on the gateway.
        class_c_lock_duration="{{ server.configuration.chirpstack.network.scheduler.class_c_lock_duration }}"
    
        # Multicast Class-C margin.
        #
        # This defines the minimum margin between scheduling multiple multicast downlinks
        # (within the same multicast-group). This value must be equal or greater than the
        # scheduler interval.
        multicast_class_c_margin="{{ server.configuration.chirpstack.network.scheduler.multicast_class_c_margin }}"
    
        # Multicast Class-B margin.
        #
        # This defines the minimum margin between scheduling multiple multicast downlinks
        # (within the same multicast-group). This value must be equal or greater than the
        # scheduler interval.
        multicast_class_b_margin="{{ server.configuration.chirpstack.network.scheduler.multicast_class_b_margin }}"
    
    
    # Monitoring related configuration.
    [monitoring]
    
        # interface:port to bind the monitoring endpoint to (optional).
        #
        # /health  - Returns 200 in case the healthchecks have passed.
        # /metrics - Returns metrics which can be scraped by Prometheus.
        #
        # If not set, this endpoint will be disabled
{% if server.configuration.chirpstack.monitoring.enabled %}
        bind="0.0.0.0:{{ server.configuration.chirpstack.monitoring.service.target_port }}"
{% else %}
        bind=""
{% endif %}
        
        # Meta-log max history.
        #
        # This defines the max number of meta records that will be persisted in Redis Streams.
        # Setting this value to 0 disables this feature.
        meta_log_max_history={{ server.configuration.chirpstack.monitoring.meta_log_max_history }}
    
        # Gateway frame-log max history.
        #
        # This defines the max number of frame-log records that will be persisted in Redis Streams.
        # This stream contains the uplink and downlink frames of all gateways.
        # Setting this value to 0 disables this feature.
        gateway_frame_log_max_history={{ server.configuration.chirpstack.monitoring.gateway_frame_log_max_history }}
    
        # Device frame-log max history.
        #
        # This defines the max number of frame-log records that will be persisted in Redis Streams.
        # This stream contains the uplink and downlink frames of all devices.
        # Setting this value to 0 disables this feature.
        device_frame_log_max_history={{ server.configuration.chirpstack.monitoring.device_frame_log_max_history }}
    
        # Device event-log max history.
        #
        # This defines the max number of event-log records that will be persisted in Redis Streams.
        # This stream contains the events of all devices.
        # Setting this value to 0 disables this feature.
        device_event_log_max_history={{ server.configuration.chirpstack.monitoring.device_event_log_max_history }}
    
        # Per gateway frame-log max history.
        #
        # Equal to the gateway_frame_log_max_history, but for each gateway a new Redis Stream
        # is created.
        # Setting this value to 0 disables this feature.
        per_gateway_frame_log_max_history={{ server.configuration.chirpstack.monitoring.per_gateway_frame_log_max_history }}
    
        # Per gateway frame-log TTL.
        #
        # This defines the TTL of the Redis Stream key.
        per_gateway_frame_log_ttl="{{ server.configuration.chirpstack.monitoring.per_gateway_frame_log_ttl }}"
    
        # Per device frame-log max history.
        #
        # Equal to the device_frame_log_max_history, but for each device a new Redis Stream
        # is created.
        # Setting this value to 0 disables this feature.
        per_device_frame_log_max_history={{ server.configuration.chirpstack.monitoring.per_device_frame_log_max_history }}
    
        # Per device frame-log TTL.
        #
        # This defines the TTL of the Redis Stream key.
        per_device_frame_log_ttl="{{ server.configuration.chirpstack.monitoring.per_device_frame_log_ttl }}"
    
        # Per device event-log max history.
        #
        # Equal to the device_event_log_max_history, but for each device a new Redis Stream
        # is created.
        # Setting this value to 0 disables this feature.
        per_device_event_log_max_history={{ server.configuration.chirpstack.monitoring.per_device_event_log_max_history }}
    
        # Per device event-log TTL.
        #
        # This defines the TTL of the Redis Stream key.
        per_device_event_log_ttl="{{ server.configuration.chirpstack.monitoring.per_device_event_log_ttl }}"
    
    
    # Global integration related configuration.
    [integration]
    
        # Enabled integrations (global).
        enabled = [
{% for integration in server.configuration.chirpstack.integration.enabled %}
            "{{ integration }}",   
{% endfor %}
        ]
    
        # MQTT integration configuration.
        [integration.mqtt]
    
        # Event topic template.
        event_topic="{{ server.configuration.chirpstack.integration.mqtt.event_topic }}"
    
        # Command topic.
        #
        # This is the topic on which the MQTT subscribes for receiving (enqueue) commands.
        command_topic="{{ server.configuration.chirpstack.integration.mqtt.command_topic }}"
    
        # Use JSON encoding instead of Protobuf (binary).
        json={{ server.configuration.chirpstack.integration.mqtt.json | lower }}
    
        # MQTT server (e.g. scheme://host:port where scheme is tcp, ssl or ws)
        server="{{ server.configuration.chirpstack.integration.mqtt.server.scheme }}://{{ server.configuration.chirpstack.integration.mqtt.server.hostname }}:{{ server.configuration.chirpstack.integration.mqtt.server.port }}/"
    
        # Connect with the given username (optional)
        username="$CHIRPSTACK_INTEGRATION_MQTT_USERNAME"
    
        # Connect with the given password (optional)
        password="$CHIRPSTACK_INTEGRATION_MQTT_PASSWORD"
    
        # Quality of service level
        #
        # 0: at most once
        # 1: at least once
        # 2: exactly once
        #
        # Note: an increase of this value will decrease the performance.
        # For more information: https://www.hivemq.com/blog/mqtt-essentials-part-6-mqtt-quality-of-service-levels
        qos={{ server.configuration.chirpstack.integration.mqtt.qos }}
    
        # Clean session
        #
        # Set the "clean session" flag in the connect message when this client
        # connects to an MQTT broker. By setting this flag you are indicating
        # that no messages saved by the broker for this client should be delivered.
        clean_session={{ server.configuration.chirpstack.integration.mqtt.clean_session | lower }}
    
        # Client ID
        #
        # Set the client id to be used by this client when connecting to the MQTT
        # broker. A client id must be no longer than 23 characters. If left blank,
        # a random id will be generated by ChirpStack.
{% if server.configuration.chirpstack.integration.mqtt.client_id.mode == "custom" %}
        client_id="{{ server.configuration.chirpstack.integration.mqtt.client_id.custom_id }}"
{% elif server.configuration.chirpstack.integration.mqtt.client_id.mode == "podname" %}
        client_id="$CHIRPSTACK_SERVER_POD_NAME"
{% else %}
        client_id=""
{% endif %}

        # Keep alive interval.
        #
        # This defines the maximum time that that should pass without communication
        # between the client and server.
        keep_alive_interval="{{ server.configuration.chirpstack.integration.mqtt.keep_alive_interval }}"
    
        # CA certificate file (optional)
        #
        # Use this when setting up a secure connection (when server uses ssl://...)
        # but the certificate used by the server is not trusted by any CA certificate
        # on the server (e.g. when self generated).
{% if server.configuration.chirpstack.integration.mqtt.ca_cert.secret %}
        ca_cert="/certs/integration-mqtt-ca.crt"
{% else %}
        ca_cert=""
{% endif %}
    
        # TLS certificate file (optional)
{% if server.configuration.chirpstack.integration.mqtt.tls_cert.secret %}
        tls_cert="/certs/integration-mqtt-tls.crt"
{% else %}
        tls_cert=""
{% endif %}

        # TLS key file (optional)
{% if server.configuration.chirpstack.integration.mqtt.tls_key.secret %}
        tls_key="/certs/integration-mqtt-tls.key"
{% else %}
        tls_key=""
{% endif %}    
    
        # Configuration for MQTT clients.
        [integration.mqtt.client]
    
            # CA certificate and key file (optional).
            #
            # If setting the CA certificate and key file options, ChirpStack 
            # will generate client certificates which can be used by the MQTT clients for
            # authentication and authorization. The Common Name of the certificate will
            # be set to the ID of the application.
{% if server.configuration.chirpstack.integration.mqtt.client.ca_key.secret %}
            ca_key="/certs/integration-mqtt-client-ca.key"
{% else %}
            ca_key=""
{% endif %} 
{% if server.configuration.chirpstack.integration.mqtt.client.ca_cert.secret %}
            ca_cert="/certs/integration-mqtt-client-ca.crt"
{% else %}
            ca_cert=""
{% endif %}

            # Certificate lifetime.
            #
            # This defines how long (after generating) the certificate remains valid.
            client_cert_lifetime="{{ server.configuration.chirpstack.integration.mqtt.client.client_cert_lifetime }}"
    
    
        # PostgreSQL integration configuration.
        [integration.postgresql]
    
        # PostgreSQL DSN.
        #
        # Format example: postgres://<USERNAME>:<PASSWORD>@<HOSTNAME>/<DATABASE>?sslmode=<SSLMODE>.
        #
        # SSL mode options:
        #  * disable - no SSL
        #  * require - Always SSL (skip verification)
        #  * verify-ca - Always SSL (verify that the certificate presented by the server was signed by a trusted CA)
        #  * verify-full - Always SSL (verify that the certification presented by the server was signed by a trusted CA and the server host name matches the one in the certificate)
        dsn="postgresql://chirpstack_integration:chirpstack_integration@localhost/chirpstack_integration?sslmode=disable"
    
        # Max open connections.
        #
        # This sets the max. number of open connections that are allowed in the
        # PostgreSQL connection pool.
        max_open_connections=10
    
        # Min idle connections.
        #
        # This sets the min. number of idle connections in the PostgreSQL connection
        # pool (0 = equal to max_open_connections).
        min_idle_connections=0
    
    
        # AMQP / RabbitMQ integration configuration.
        [integration.amqp]
    
        # Server URL.
        #
        # See for a specification of all the possible options:
        # https://www.rabbitmq.com/uri-spec.html
        url="amqp://guest:guest@localhost:5672"
    
        # Event routing key.
        #
        # This is the event routing-key template used when publishing device
        # events. Messages will be published to the "amq.topic" exchange.
        event_routing_key=""
    
        # Use JSON encoding instead of Protobuf (binary).
        json=true
    
    
        # Kafka integration configuration.
        [integration.kafka]
    
        # Brokers.
        brokers=[
            "localhost:9092",
        ]
    
        # TLS.
        #
        # Set this to true when the Kafka client must connect using TLS to the Broker.
        tls=false
    
        # Topic for events.
        topic="chirpstack"
    
        # Template for keys included in Kafka messages.
        # Kafka uses the key for distributing messages over partitions. You can use
        # this to ensure some subset of messages end up in the same partition, so
        # they can be consumed in-order. And Kafka can use the key for data retention
        # decisions.  A header "event" with the event type is included in each
        # message. There is no need to parse it from the key.
        event_key=""
    
        # Username (optional).
        username=""
    
        # Password.
        password=""
    
        # Mechanism.
        #
        # Valid options are:
        # * PLAIN
        # * SCRAM-SHA-256
        # * SCRAM-SHA-512
        mechanism="PLAIN"
    
        # Use JSON encoding instead of Protobuf (binary).
        json=true
    
    
    # Codec configuration.
    [codec]
    
        # JS codec configuration.
        [codec.js]
    
        # Maximum execution time.
        max_execution_time="{{ server.configuration.chirpstack.codec.js.max_execution_time }}"
    
    
    # User authentication configuration.
    [user_authentication]

        # Enabled authentication backend.
        #
        # Options are:
        #  * internal       - Internal authentication backend (default).
        #  * openid_connect - OpenID Connect based backend.
        #  * oauth2         - OAuth2 based backend.
        enabled="{{ server.configuration.chirpstack.user_authentication.enabled }}"
    
        # OpenID Connect.
        [user_authentication.openid_connect]

                # Registration enabled.
                #
                # Enabling this will automatically register the user when it is not yet present
                # in the ChirpStack database. There is no registration form as the user information
                # is automatically received using the OpenID Connect provided information.
                # The user will not be associated with any organization, but in order to
                # facilitate the automatic onboarding of users, it is possible to configure a
                # registration callback URL (next config option).
                registration_enabled={{ server.configuration.chirpstack.user_authentication.openid_connect.registration_enabled | lower }}
        
                # Registration callback URL.
                #
                # This (optional) endpoint will be called on the registration of the user and
                # can implement the association of the user with an organization, create a new
                # organization, ...
                # ChirpStack will make a HTTP POST call to this endpoint,
                # with the following URL parameters:
                # - user_id, of the newly created user in ChirpStack.
                #
                # The POST body contains a JSON payload with the OpenID Connect UserInfo payload.
                registration_callback_url="{{ server.configuration.chirpstack.user_authentication.openid_connect.registration_callback_url }}"
        
                # Provider URL.
                # This is the URL of the OpenID Connect provider.
                # Example: https://auth.example.org
                provider_url="{{ server.configuration.chirpstack.user_authentication.openid_connect.provider_url }}"
        
                # Client ID.
                client_id="{{ server.configuration.chirpstack.user_authentication.openid_connect.client_id }}"
        
                # Client secret.
                client_secret="$CHIRPSTACK_USER_AUTHENTICATION_OPENID_CONNECT_CLIENT_SECRET"
        
                # Redirect URL.
                #
                # This must contain the ChirpStack Application Server web-interface hostname
                # with '/auth/oidc/callback' path, e.g. https://example.com/auth/oidc/callback.
                redirect_url="{{ server.configuration.chirpstack.user_authentication.openid_connect.redirect_url }}"
        
                # Logout URL.
                #
                # When set, ChirpStack Application Server will redirect to this URL instead
                # of redirecting to the login page.
                logout_url="{{ server.configuration.chirpstack.user_authentication.openid_connect.logout_url }}"
                
                ## Login redirect.
                #
                # If set to true, then ChirpStack will immediately redirect to the OAuth2
                # provider for login.
                login_redirect={{ user_authentication.openid_connect.login_redirect | lower }}
                
                # Login label.
                #
                # The login label is used in the web-interface login form.
                login_label="{{ server.configuration.chirpstack.user_authentication.openid_connect.login_label }}"

                # Assume e-mail verified.
                #
                # If set to true, then ChirpStack will ignore the email_verified received
                # from the OpenID Connect provider, assuming it will be true. Some
                # providers do not provide this field, in which case setting this value
                # is needed.
                assume_email_verified={{ server.configuration.chirpstack.user_authentication.openid_connect.assume_email_verified | lower }}
            
                # Scopes.
                #
                # This configures the scopes that are used during login. You must at least define
                # "email" and "profile".
                scopes=[
{% for scope in server.configuration.chirpstack.user_authentication.openid_connect.scopes %}
                        "{{ scope }}",
{% endfor %}
                ]
    
    # Join Server configuration.
    [join_server]
    
        # Per Join Server configuration (this can be repeated).
        # Example:
        # [[join_server.servers]]
        #
        #   # JoinEUI of the Join Server.
        #   join_eui="0102030405060708"
        #
        #   # Server endpoint.
        #   server="https://example.com:1234/join/endpoint"
    
        #   # Use the async interface scheme.
        #   async_interface=false
    
        #   # Async interface request timeout.
        #   async_interface_timeout="1s"
    
        #   # CA certificate (optional).
        #   #
        #   # Set this to validate the join-server server certificate (e.g. if the
        #   # certificate was self-signed).
        #   ca_cert="/path/to/ca.pem"
    
        #   # TLS client-certificate (optional).
        #   #
        #   # Set this to enable client-certificate authentication with the join-server.
        #   tls_cert="/path/to/tls_cert.pem"
    
        #   # TLS client-certificate key (optional).
        #   #
        #   # Set this to enable client-certificate authentication with the join-server.
        #   tls_key="/path/to/tls_key.pem"
    
    
    # Backend Interfaces configuration (optional).
    [backend_interfaces]
    
        # interface:port to bind the Backend Interfaces API to.
        #
        # Note: this interface is used both for passive-roaming and when
        # integrating with Join Servers that implement the async interface.
        # Leaving this option blank will disable the Backend Interfaces API,
        # which is fine in most cases.
        bind="{{ server.configuration.chirpstack.backend_interfaces.bind }}"

        # CA certificate (path).
{% if server.configuration.chirpstack.backend_interfaces.ca_cert.secret %}
        ca_cert="/certs/backend-interfaces-ca.crt"
{% else %}
        ca_cert=""
{% endif %}
    
        # TLS certificate (path).       
{% if server.configuration.chirpstack.backend_interfaces.tls_cert.secret %}
        tls_cert="/certs/backend-interfaces-tls.crt"
{% else %}
        tls_cert=""
{% endif %}

        # TLS key (path).
{% if server.configuration.chirpstack.backend_interfaces.tls_key.secret %}
        tls_key="/certs/backend-interfaces-tls.key"
{% else %}
        tls_key=""
{% endif %}    
    
    # Roaming configuration.
    [roaming]
    
        # Resolve NetID domain suffix.
        resolve_net_id_domain_suffix=""
    
        # Per server roaming configuration (this can be repeated).
        # Example:
        # [[roaming.servers]]
        #
        #  # NetID of the roaming server.
        #  net_id="010203"
        #
        #  # Async timeout (set to 0 to disable async interface).
        #  async_timeout="0s"
        #
        #  # Passive-roaming session lifetime (set to 0 for stateless).
        #  passive_roaming_lifetime="0s"
        #
        #  # Passive-roaming KEK label (optional).
        #  #
        #  # If set, the session-keys will be encrypted using the given KEK.
        #  passive_roaming_kek_label=""
        #
        #  # Server.
        #  #
        #  # If set, this will bypass the DNS resolving of the server.
        #  server="https://example.com:1234"
        #
        #  # Use target role suffix.
        #  #
        #  # Depending the context of the remote server, this will add
        #  # the /sns or /fns path to the server endpoint.
        #  use_target_role_suffix=false
        #
        #  # CA certificate (path).
        #  ca_cert=""
        #
        #  # TLS certificate (path).
        #  tls_cert=""
        #
        #  # TLS key (path).
        #  tls_key=""
        #
        #  # Authorization header.
        #  #
        #  # Optional value of the Authorization header, e.g. token or password.
        #  authorization_header=""
    
    
    # Key encryption keys (KEKs).
    #
    # KEKs can be used to encrypt session-keys between two endpoints,
    # for example a Join Server and Network Server, or between two
    # Network Servers in case of a roaming agreement. If used, the
    # sender will encrypt the session-key with the KEK and indicates
    # to the receiver the label of the KEK that was used for encryption,
    # such that the receiver is able to decrypt the session-key.
    #
    # Example (can be repeated):
    # [[keks]]
    #
    #   # KEK label.
    #   label="kek-label"
    
    #   # Encryption key.
    #   kek="01020304050607080102030405060708"
---
apiVersion: v1
kind: Secret
metadata:
  name: "chirpstack-{{ ansible_operator_meta.name }}"
  namespace: "{{ ansible_operator_meta.namespace }}"
data:
{% for item in envs_from_secrets_chirpstack %}
  {{ item.env }}: "{{ vars[item.var] }}"
{% endfor %}
{% for item in envs_from_secrets_regions %}
  {{ item.env }}: "{{ vars[item.var] }}"
{% endfor %}